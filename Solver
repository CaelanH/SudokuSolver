package code;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Solver {
   public static Cell[][] puzzle = new Cell[9][9];
   public static Scanner scan = new Scanner (System.in);
   public static void reading() throws FileNotFoundException{
       File sudoku = new File("puzzle.txt");
       Scanner input = new Scanner(sudoku);
       for (int x=0; x < 9; x++){
           for (int y=0; y < 9; y++){
               Cell cell = new Cell();               
               cell.setData(input.nextInt());
               cell.setColumnID(x);
               cell.setRowID(y);
               if(x<3 && y<3)
            	   cell.setBoxID(1);
               else if (x<6&&y<3)
            	   cell.setBoxID(2);
               else if (x<9&&y<3)
            	   cell.setBoxID(3);
               else if(x<3 && y<6)
            	   cell.setBoxID(4);
               else if (x<6&&y<6)
            	   cell.setBoxID(5);
               else if (x<9&&y<6)
            	   cell.setBoxID(6);
               else if(x<3 && y<9)
            	   cell.setBoxID(7);
               else if (x<6&&y<9)
            	   cell.setBoxID(8);
               else if (x<9&&y<9)
            	   cell.setBoxID(9);
               puzzle[x][y] = cell;
           }
       }
    }
   public static void updatePossibleNumbers(){
	   
   }
   public static int BinarySearch(int[]Array, int number){
		int max = 9;
		int min = 0;
		int index = max;
		boolean found = false;
	    while (min <= max) {
	        int mid = (min + max) / 2;
	        if (Array[mid] < number) 
	            min = mid + 1;
	        else if (Array[mid] > number) 
	            max = mid - 1;
	        else if (Array[mid] == number) 
	        {
	            index = mid;
	            found = true;
	            break;
	        }
	    }
	    if (found == true)
	    	return index;
	    else
	    	return 0;
	}

    public static void condition1() { // if there's only one possible number
       int counter = 0;
       int position = 0;
       int number = 0;
       for (int x = 0; x < 9; x++){ 
    	   for (int y = 0; y<9; y++) {
    		   for(position = 0; position <9; position ++)
    		   {
    			   if(puzzle[x][y].getPossibleNumbers(position) != 0)
    	           { 
    	        	   counter++;
    	        	   number = position;
    	           }
    	           if (counter == 1)
    	        	   puzzle[x][y].setData(puzzle[x][y].getPossibleNumbers(number));
    		   }
    	   }
       }   
    }
    public static void condition2() { // if a cell in a given box,row or column is the only one that can be that number
    	int[] manta = new int[10];
    	int position = 0;
    	for (int x = 0; x < 9; x++){ 
     	   for (int y = 0; y<9; y++) {
     		   for(position = 0; position <9; position ++){
     			   if(puzzle[x][y].getPossibleNumbers(position) != 0)
     	           { 
     				   manta[position]++;
     				   
     	           }
     		   }
     		   
     	   }
        }   
    }
    public static void condition3() {// if row/column has the two cells that share the same potential number and both of these cells are in the same box
        			// and they are the only cells in the box that have this potential number, then the rest of the cells in the row/column cannot be that number
    	
    }
    public static void condition4() {//If two cells in the same row/column/box share the same two potential (only), then the other cells in the row/column/box cannot be those two numbers
        
    }
    public static void guess() {
    	
    }
    public static void print() {
        
    }
    public static void main(String[] args) throws FileNotFoundException {
        reading();
    }
}



